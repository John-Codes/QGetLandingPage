---
const apiKey = import.meta.env.X_API_KEY;
const apiKeySecret = import.meta.env.X_API_KEY_SECRET;
const username = 'XAINovator';
const userId = import.meta.env.X_USER_ID;
const maxResults = 5;

// Function to fetch the user ID from the username
async function getAccessToken() {
  try {
    const credentials = Buffer.from(`${apiKey}:${apiKeySecret}`).toString('base64');
    const response = await fetch('https://api.twitter.com/oauth2/token', {
      method: 'POST',
      headers: {
        'Authorization': `Basic ${credentials}`,
        'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8'
      },
      body: 'grant_type=client_credentials'
    });
    if (!response.ok) {
      const text = await response.text();
      console.error('Access Token fetch error - HTTP Status:', response.status, 'Response:', text);
      return null;
    }
    const data = await response.json();
    console.log('Access Token response:', JSON.stringify(data, null, 2));
    if (data.access_token) {
      return data.access_token;
    }
    console.error('Access Token fetch error:', data.errors || data);
    return null;
  } catch (error) {
    console.error('Access Token fetch exception:', error);
    return null;
  }
}

// Function to fetch the latest posts from the user
async function fetchPosts() {
  try {
    const accessToken = await getAccessToken();
    if (!accessToken) {
      console.error('No access token obtained, cannot fetch posts.');
      return [];
    }
    if (!userId) {
      console.error('No user ID defined in environment variables, cannot fetch posts.');
      return [];
    }
    const response = await fetch(`https://api.twitter.com/2/users/${userId}/tweets?max_results=${maxResults}&tweet.fields=created_at,text&exclude=retweets,replies`, {
      headers: {
        'Authorization': `Bearer ${accessToken}`
      }
    });
    const data = await response.json();
    console.log('Posts response:', JSON.stringify(data, null, 2));
    if (data.data) {
      return data.data;
    } else {
      console.error('Posts fetch error:', data.errors || data);
      return [];
    }
  } catch (error) {
    console.error('Error fetching posts:', error);
    return [];
  }
}

const posts = await fetchPosts();
---

<section class="py-16 bg-gray-50">
  <div class="container mx-auto px-4">
    <h2 class="text-3xl font-bold text-center mb-12 text-gray-800">Latest X Posts</h2>
    <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-8">
      {posts.length > 0 ? (
        posts.map((post: { id: string; text: string; created_at: string }) => (
          <div class="bg-white rounded-lg shadow-md overflow-hidden transform transition duration-300 hover:scale-105">
            <div class="p-4">
              <p class="text-gray-800 mb-2">{post.text}</p>
              <p class="text-sm text-gray-600">Posted on {new Date(post.created_at).toLocaleDateString()}</p>
              <a href={`https://x.com/${username}/status/${post.id}`} target="_blank" rel="noopener noreferrer" class="mt-4 inline-block text-blue-600 hover:text-blue-800 font-medium">View on X</a>
            </div>
          </div>
        ))
      ) : (
        <div class="text-center col-span-full py-8">
          <p class="text-lg text-gray-600 mb-6">Unable to fetch posts at the moment.</p>
          <a href={`https://x.com/${username}`} target="_blank" rel="noopener noreferrer" class="inline-block bg-blue-600 hover:bg-blue-800 text-white font-semibold py-3 px-6 rounded-lg transition duration-300">
            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="inline-block mr-2">
              <path d="M22 4s-.7 2.1-2 3.4c1.6 10-9.4 17.3-18 11.6 2.2.1 4.4-.6 6-2C3 15.5.5 9.6 3 5c2.2 2.6 5.6 4.1 9 4-.9-4.2 4-6.6 7-3.8 1.1 0 3-1.2 3-1.2z"></path>
            </svg>
            Visit my X Profile
          </a>
        </div>
      )}
    </div>
  </div>
</section>
